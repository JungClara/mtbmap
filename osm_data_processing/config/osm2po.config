######################################################################
#
# CONVERTER
#
######################################################################

# Known PlugIn-Parsers detected by file extension.
# Other extensions will be passed to OsmXmlParser.

osmParser.pbf = de.cm.osm2po.plugins.OsmPbfParser
osmParser.o5m = de.cm.osm2po.plugins.OsmO5mParser
osmParser.o5m.gz = de.cm.osm2po.plugins.OsmO5mGzParser
osmParser.osm.bz2 = de.cm.osm2po.plugins.OsmXmlBz2Parser

# Set Caching behavior for tiles.
# There are two different mechanisms in osm2po to handle
# large files which tend to bomb our memory. The uncompressed
# mode tiles first and the compressed mode runs tiling as a
# postprocess after caching references from ways.
# Tiling usually needs a buffer in order to resolve
# ways that cross over tiles. The default value is 0.1 degrees.
# The default for a tile is 1x1 degrees.
# This is a very pessimistic setting, good for small areas
# but bad for countries or continents. For the latter values
# like 5x5 or even 10x10 should be used.
# But running without tiling at all is possible, too.
# The tileSize Parameter takes up to three Parameters.
# They may appear in any order.
# 1) Size
# 2) Buffer
# 3) Additional switches as a sequence of lower case letters.
#    Currently the only known switch is "c" (compressed mode).
# Examples:
# tileSize = 5x5 (Run with tileSize 5x5)
# tileSize = x, c (Run without tiling and run compression before)
# tileSize = 10x10, 0.5, c (Compress 10x10 with a buffer of 0.5)

tileSize = 10x10,0.5  

# Osm2po's Tilemanager must be able to cache lots of
# tiles. Therefore it has to estimate free memory.
# If osm2po runs into an OutOfMemoryError this may
# be due to a wrong System Memory usage assumption.
# This mostly happens under 64 Bit Java.
# If you see lots of warnings like OutOfMemoryError
# increase this at least to the amount where the last
# operation failed. Default is 32 (MegaByte)

#reservedXmx = 512

# Skip tiles that have less than this number of
# nodes (faster). Default is 0.

tileThreshold = 0

# Usually the caching of many tiles is the fastest approach.
# In some cases, mostly if these tiles contain hardly any
# nodes, this optimization may cause the opposite effect.
# In this case it might be faster to reread a way-file 
# than caching as many tiles as possible. 

maxTilesPerLoop = 100

######################################################################
#
# DEFAULT TAG RESOLVER
#
######################################################################

# A TagResolver implementation translates OSM-tags into a more
# useful set of information like name, speed, usage, ..., etc.
# If you need a special behavior, which cannot be handled by this
# default mechanism, feel free to implement your own TagResolver.
# The default TagResolver for ways uses two bit-fields (allowed and denied)
# Each parsed osm-tag may modify flags in one of these fields
# either by allowing bits (or-op.) or by denying bits (inverse-and-op.).
# The default implementation is 'de.cm.osm2po.converter.DefaultWayTagResolver'
# Node- and RelationTagResolvers are indended for future use.

#wayTagResolver.class = com.to.another.package.YourWayTagResolver
#nodeTagResolver.class = com.to.another.package.YourNodeTagResolver
#relationTagResolver.class = com.to.another.package.YourRelationTagResolver

# Properties of DefaultWayTagResolver use this prefix.
# Default is "wtr".
#wayTagResolver.prefix = wtr

# possible flags with ascending binary values 1, 2, 4, 8 ...
# You may define up to 32 Flags (Bits).
wtr.flagList = car, bike, foot, rail, ferry
 
# final decision; only allow ways with these flags
wtr.finalMask = car|bike|foot|rail|ferry

# very special hint for level_crossing modification
wtr.shuttleTrainMask = rail|car

# Main-Tag definitions.
# tag.highway.xxx = concurrentOrder, class (1-127), defaultSpeedKmh
# non highways
#wtr.tag.route.ferry =            2, 01, 10
#wtr.tag.route.shuttle_train =    2, 02, 50
#wtr.tag.railway.rail =           3, 03, 50
# highways
wtr.tag.highway.motorway =       1, 11, 120
wtr.tag.highway.motorway_link =  1, 12, 30
wtr.tag.highway.trunk =          1, 13, 90
wtr.tag.highway.trunk_link =     1, 14, 30
wtr.tag.highway.primary =        1, 15, 70
wtr.tag.highway.primary_link =   1, 16, 30
wtr.tag.highway.secondary =      1, 21, 60
wtr.tag.highway.secondary_link = 1, 22, 30
wtr.tag.highway.tertiary =       1, 31, 40
wtr.tag.highway.residential =    1, 32, 50
wtr.tag.highway.road =           1, 41, 30
wtr.tag.highway.unclassified =   1, 42, 30
wtr.tag.highway.service =        1, 51, 5
wtr.tag.highway.pedestrian =     1, 62, 5
wtr.tag.highway.living_street =  1, 63, 7
# non car
wtr.tag.highway.track =          1, 71, 10
wtr.tag.highway.path =           1, 72, 10
wtr.tag.highway.bridleway =      1, 73, 10
wtr.tag.highway.cycleway =       1, 81, 15
wtr.tag.highway.footway =        1, 91, 5
wtr.tag.highway.steps =          1, 92, 5

# Allow/Deny-Tags
# Tags without explicit values like wtr.allow.highway
# act like an else part and
# will be used if no other tag=value matches.
#wtr.allow.highway.track = foot|bike
#wtr.deny.tracktype.grade5 = car|bike
#wtr.allow.highway.cycleway = bike
#wtr.allow.highway.footway = foot
#wtr.allow.highway.steps = foot
wtr.allow.highway = car|bike|foot|rail|ferry
#wtr.allow.route.ferry = ferry
#wtr.allow.route.shuttle_train = rail|car
#wtr.allow.railway.rail = rail
#wtr.deny.access.no = car|bike|foot|rail|ferry
#wtr.deny.vehicle.no = car|bike
#wtr.allow.motor_vehicle.yes = car
#wtr.allow.motor_vehicle.destination = car
#wtr.deny.motor_vehicle = car
#wtr.allow.motorcar.yes = car
#wtr.allow.motorcar.destination = car
#wtr.deny.motorcar = car 
#wtr.allow.bicycle = bike
#wtr.deny.bicycle.no = bike
#wtr.deny.foot.no = foot
#wtr.deny.cycleway.no = bike
#wtr.allow.cycleway = bike

######################################################################
#
# LOGGER
#
######################################################################

# This is the LogLevel for global (log.level) and
# console (log.console.level) and file logging.
# Possible values are
# debug, progress, warn, info, error, fatal.
# Default for all is info
# In addition you can set another ConsoleWriter
# Default is Log2poConsoleWriter

log.level = debug
log.file.level = debug
log.console.level = progress
#log.console.writer.class = de.cm.osm2po.logging.Log2poConsoleWriter
#log.console.writer.class = de.cm.osm2po.logging.LogJclWriter

# Redirecting of StandardOut (console)
# Possible values are out, err or null (quiet).
# Default (of course) is out.
# This is a nice feature which let's you
# link osm2po to an input pipe.

#log.console.to = err


######################################################################
#
# POSTPROCESSORS
#
######################################################################

postp.1.class = de.cm.osm2po.converter.PgRoutingWriter
#postp.1.writeMultiLineStrings = true
#postp.2.class = de.cm.osm2po.plugins.PgVertexWriter

# osm2po's default behavior is the creation of output files.
# Use this paraemter in order to print to stdout (console)

#postp.pipeOut = true
 
# Tricky:
# If you want this program to be one link in a pipe chain
# e.g. curl | bzcat | osm2po | psql
# you must set both, log.console.to=err and postp.pipeOut=true.
# In addition must run curl, bzcat and psql in silent/quiet mode. 
# Example (one line):
# curl -s -L http://download.geofabrik.de/osm/europe/germany/hamburg.osm.bz2 |
# bzcat -c | java -jar osm2po-core-4.jar prefix=hh postp.pipeOut=true log.console.to=err |
# psql -q -U myuser -s -d mydb


######################################################################
#
# OSM2PO-Routing
#
######################################################################

# Affects the graph build.
# This pluggable class translates other properties like kmh or flags
# and allows to mix in external data.

#graph.build.interceptor.class = de.cm.osm2po.converter.DefaultGraphBuildInterceptor

# Each Segment will be split into a forward and a reverse edge.
# Reverse edges which are derived from one-way-segments are
# written by default. This is useful for bike routing but
# not for car routing and blows up your graph size in memory.
# To exclude these "WrongWays" set the following parameter to true

#graph.build.excludeWrongWays = true

# These are some settings for the caching and lookup behavior.
# In order to speed up geometry lookups you may want to set
# graph.support.segments=true. This disables HardDisk-Lookups but needs
# much more RAM (Xmx). Setting graph.support.edgeflags=true is useful
# for Soap/GeoJson-Requests. If not set, you will not receive street type infos.
# Setting graph.support.reverse=true creates an additional Reverse-Graph.
# The BidiRouter and the ToggelRouter need this. (see below).
# graph.support.raster is another RAM-wasting addition, which creates
# an rastered index for vertex coordinates for faster lookups. 

graph.support.segments = true
#graph.support.edgeflags = true
#graph.support.reverse = true
#graph.support.raster = true
#graph.support.barriers = true

# These are the known Routing implementations.
# Default is the DefaultRouter, which is a simple Dijkstra/AStar
# with some specials.

router.0.class=de.cm.osm2po.routing.DefaultRouter
#router.1.class=de.cm.osm2po.routing.SimpleRouter
router.2.class=de.cm.osm2po.routing.EdgeRouter
router.3.class=de.cm.osm2po.routing.BidiRouter
#router.4.class=de.cm.osm2po.routing.ReversibleRouter
#router.5.class=de.cm.osm2po.routing.PoiRouter
router.6.class=de.cm.osm2po.routing.OverlayRouter

# Service Settings

#service.domain = localhost
#service.port = 8888

# Show these NodeClazzes as Layer
#nodeClazz.-1.name = LevelCrossing
#nodeClazz.-2.name = LevelCrossingRaised
#nodeClazz.-3.name = TurnRestriction
#nodeClazz.-4.name = Barrier

######################################################################
#
# OSM2PO-Samples (see Plugins Sources)
#
######################################################################

# TrafficSignals-Sample

#nodeClazz.1.name=Traffic Signals
#nodeTagResolver.class=de.cm.osm2po.samples.TrafficSignalsNodeTagResolver
#router.11.class=de.cm.osm2po.samples.TrafficSignalsRouter

